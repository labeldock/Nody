	<div class='container'>
		<div class='row'>
			<section class='col-sm-8 code-section'>
				<article>
					<header>need..</header>
					<p>need.. 문은 화면상 변화가 있는 API에 사용됩니다. 호출시 동작이 안될수도 있음을 암시해야 합니다.</p>
				</article>
				<article>
					<header>some, getSome</header>
					<p>예를들어 NFArray에서 map은 오브젝트 원문에 영향을 줍니다. 하지만 getMap은 오브젝트 원문과 관련없이 새로운 오브젝트를 반환합니다.</p>
				</article>
				<article>
					<header>whenDid.. , whenWill..</header>
					<p>어느 시점의 커스텀 이벤트문입니다. 시점의 전과 후로 나뉘며 will문에서는 반환값이 false일 경우 일반적으로 이벤트가 취소 됩니다.</p>
				</article>
				<article>
					<header>Module::Source</header>
					<p>모듈의 Source는 모듈상 가장 중심이 되는 값을 Source에 넣습니다. 예를 들어 NFArray는 array NFString은 string입니다.</p>
				</article>
				<article>
					<header>Getter</header>
					<p>Getter는 단순 함수이나 함수자체에서 인스턴스를 만들어내는 기능이 들어있습니다. 예를들어 ZSTRING의 경우 ZSTRING.SEED(1)('seed is \\{$i}')와 같이 확장함수가 포함되어 있습니다.</p>
				</article>
				<article>
					<header>should..</header>
					<p>should문은 오브젝트가 반드시 되어야할 상태값을 명령하는 것입니다. should문은 반드시 코드블럭이 끝나기전에 상태값이 완전히 셋팅되어야만 하는것이 아닌것임을 염두해야합니다.</p>
				</article>
				<article>
					<header>find..</header>
					<p>find문은 반드시 노드가 리턴되는 API가 되어야 합니다.</p>
				</article>
				<article>
					<header>DATA..</header>
					<p>DATA..은 배열 데이터를 다루기 위한 함수입니다. DATA의 특징은 undefined와 array를 제외한 모든 값들은 단수의 배열로 취급합니다..</p>
				</article>
				<article>
					<header>PROP..</header>
					<p>PROP..은 오브젝트의 어트리뷰트값을 다루기위한 함수입니다..</p>
				</article>
				<article>
					<header>NF..</header>
					<p>NF(Nody Foundation)문은 nody의 기본 모듈집합을 의미합니다.</p>
				</article>
				<article>
					<header>Z..</header>
					<p>NF와 다른 Z문들의 특징은 함수 한번으로 빠르게 종결하려는 특징이 있습니다.</p>
				</article>
				
			</section><!-- 좌측 끝 -->
			<aside class='col-sm-3 col-sm-push-1'>
				<div class='box-module table-of-contents hidden-xs'>
					<h4>About</h4>
					<menu class='text-primary'>
					</menu>
				</div>
			</aside>
		</div>
	</div>